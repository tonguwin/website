---
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";

// Blog posts with explicit dates for easy management
const posts = [
  {
    title: "Jumpboy",
    date: "March 31, 2025",
    excerpt: "A simple platformer game about a boy trying to escape an infinitely deep well.",
    slug: "jumpboy",
    preview: "You've fallen too far..."
  },
  {
    title: "Calcifer",
    date: "March 10, 2025",
    excerpt: "A tribute to the fire demon from Howl's Moving Castle.",
    slug: "calcifer",
    preview: "A tribute."
  },
  {
    title: "Welcome to the Secret Blog",
    date: "March 9, 2025",
    excerpt: "A special place for special things.",
    slug: "welcome",
    preview: ""
  },
  {
    title: "Test Entry",
    date: "March 8, 2025",
    excerpt: "Just testing the waters.",
    slug: "test-entry",
    preview: "Just testing the waters."
  }
];

// Sort posts by date (most recent first)
const sortedPosts = [...posts].sort((a, b) => {
  const dateA = new Date(a.date);
  const dateB = new Date(b.date);
  return dateB.getTime() - dateA.getTime();
});
---

<BaseLayout>
  <div class="min-h-screen bg-secondary px-4 sm:px-8 py-8 sm:py-16">
    <div class="max-w-3xl mx-auto">
      <div class="flex justify-between items-center mb-6 sm:mb-8" data-aos="fade-up" data-aos-duration="1000">
        <h1 class="text-3xl sm:text-4xl font-bold text-primary hover:text-white transition-colors duration-300">
          Secret Blog
        </h1>
        <button
          id="sort-toggle"
          class="flex items-center space-x-2 text-primary/60 hover:text-white transition-colors duration-300"
        >
          <span id="sort-text">Newest First</span>
          <svg class="w-4 h-4 transition-transform duration-300" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M7 13l5 5 5-5"/>
          </svg>
        </button>
      </div>
      
      <div id="posts-container" class="space-y-8 sm:space-y-12 mb-32 sm:mb-40">
        {sortedPosts.map(post => (
          <BlogPost
            title={post.title}
            date={post.date}
            excerpt={post.excerpt}
            slug={post.slug}
            preview={post.preview}
          />
        ))}
      </div>
    </div>

    <!-- Floating Gastly -->
    <div class="fixed bottom-0 left-0 w-full h-32 sm:h-40 flex items-center justify-center pointer-events-none bg-gradient-to-t from-secondary via-secondary to-transparent">
      <a href="/" class="pointer-events-auto">
        <svg
          id="gastly"
          class="cursor-pointer w-[100px] h-[100px] sm:w-[150px] sm:h-[150px]"
          viewBox="0 0 64 64"
          xmlns="http://www.w3.org/2000/svg"
        >
          <!-- Gas effect (outer) -->
          <circle cx="32" cy="32" r="24" fill="#2D1F3D" opacity="0.4">
            <animate attributeName="r" values="24;26;24" dur="4s" repeatCount="indefinite" />
            <animate attributeName="opacity" values="0.4;0.5;0.4" dur="4s" repeatCount="indefinite" />
          </circle>

          <!-- Main body -->
          <circle cx="32" cy="32" r="20" fill="#382B4A">
            <animate attributeName="r" values="20;21;20" dur="3s" repeatCount="indefinite" />
          </circle>

          <!-- Eyes -->
          <g transform="translate(20,24)">
            <!-- Left eye -->
            <circle cx="0" cy="0" r="6" fill="white" opacity="0.9" />
            <circle cx="0" cy="0" r="3" fill="#2D1F3D">
              <animate attributeName="r" values="3;3.2;3" dur="3s" repeatCount="indefinite" />
            </circle>

            <!-- Right eye -->
            <circle cx="24" cy="0" r="6" fill="white" opacity="0.9" />
            <circle cx="24" cy="0" r="3" fill="#2D1F3D">
              <animate attributeName="r" values="3;3.2;3" dur="3s" repeatCount="indefinite" />
            </circle>
          </g>

          <!-- Mouth (subtle, like Charmander's) -->
          <path
            d="M30,36 C31,37 33,37 34,36"
            fill="none"
            stroke="white"
            stroke-width="1"
            stroke-linecap="round"
            opacity="0.7"
          />

          <!-- Gas particles -->
          <g opacity="0.4">
            <circle cx="16" cy="32" r="3" fill="#2D1F3D">
              <animate attributeName="cx" values="16;14;16" dur="4s" repeatCount="indefinite" />
              <animate attributeName="cy" values="32;30;32" dur="4s" repeatCount="indefinite" />
              <animate attributeName="opacity" values="0.4;0.6;0.4" dur="4s" repeatCount="indefinite" />
            </circle>
            <circle cx="48" cy="32" r="3" fill="#2D1F3D">
              <animate attributeName="cx" values="48;50;48" dur="4.5s" repeatCount="indefinite" />
              <animate attributeName="cy" values="32;34;32" dur="4.5s" repeatCount="indefinite" />
              <animate attributeName="opacity" values="0.4;0.6;0.4" dur="4.5s" repeatCount="indefinite" />
            </circle>
            <circle cx="32" cy="16" r="3" fill="#2D1F3D">
              <animate attributeName="cy" values="16;14;16" dur="5s" repeatCount="indefinite" />
              <animate attributeName="opacity" values="0.4;0.6;0.4" dur="5s" repeatCount="indefinite" />
            </circle>
            <circle cx="32" cy="48" r="3" fill="#2D1F3D">
              <animate attributeName="cy" values="48;50;48" dur="3.5s" repeatCount="indefinite" />
              <animate attributeName="opacity" values="0.4;0.6;0.4" dur="3.5s" repeatCount="indefinite" />
            </circle>
          </g>
        </svg>
      </a>
    </div>
  </div>

  <style>
    /* Add stars in the background */
    .min-h-screen {
      position: relative;
      overflow: hidden;
    }

    .min-h-screen::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-image: 
        radial-gradient(2px 2px at 20px 30px, #ff000010 0%, #00ff0010 50%, #0000ff10 100%, transparent),
        radial-gradient(2px 2px at 40px 70px, #ff00ff10 0%, #00ffff10 50%, #ffff0010 100%, transparent),
        radial-gradient(2px 2px at 50px 160px, #ff800010 0%, #80ff0010 50%, #0080ff10 100%, transparent),
        radial-gradient(2px 2px at 90px 40px, #ff008010 0%, #00ff8010 50%, #8000ff10 100%, transparent),
        radial-gradient(2px 2px at 130px 80px, #ff400010 0%, #40ff0010 50%, #0040ff10 100%, transparent),
        radial-gradient(2px 2px at 160px 120px, #ff004010 0%, #00ff4010 50%, #4000ff10 100%, transparent),
        radial-gradient(2px 2px at 200px 30px, #ffc00010 0%, #c0ff0010 50%, #00c0ff10 100%, transparent),
        radial-gradient(2px 2px at 240px 70px, #ff00c010 0%, #00ffc010 50%, #c000ff10 100%, transparent),
        radial-gradient(2px 2px at 280px 160px, #ff600010 0%, #60ff0010 50%, #0060ff10 100%, transparent),
        radial-gradient(2px 2px at 320px 40px, #ff006010 0%, #00ff6010 50%, #6000ff10 100%, transparent),
        radial-gradient(2px 2px at 360px 80px, #ffa00010 0%, #a0ff0010 50%, #00a0ff10 100%, transparent),
        radial-gradient(2px 2px at 400px 120px, #ff00a010 0%, #00ffa010 50%, #a000ff10 100%, transparent),
        radial-gradient(2px 2px at 440px 30px, #ff200010 0%, #20ff0010 50%, #0020ff10 100%, transparent),
        radial-gradient(2px 2px at 480px 70px, #ff002010 0%, #00ff2010 50%, #2000ff10 100%, transparent),
        radial-gradient(2px 2px at 520px 160px, #ffe00010 0%, #e0ff0010 50%, #00e0ff10 100%, transparent),
        radial-gradient(2px 2px at 560px 40px, #ff00e010 0%, #00ffe010 50%, #e000ff10 100%, transparent);
      background-repeat: repeat;
      background-size: 600px 600px;
      animation: starGlow 8s ease-in-out infinite;
      opacity: 0.4;
      z-index: 0;
      pointer-events: none;
    }

    @keyframes starGlow {
      0% {
        opacity: 0.3;
        filter: hue-rotate(0deg) brightness(1);
      }
      25% {
        opacity: 0.5;
        filter: hue-rotate(90deg) brightness(1.2);
      }
      50% {
        opacity: 0.4;
        filter: hue-rotate(180deg) brightness(1);
      }
      75% {
        opacity: 0.6;
        filter: hue-rotate(270deg) brightness(1.3);
      }
      100% {
        opacity: 0.3;
        filter: hue-rotate(360deg) brightness(1);
      }
    }

    /* Ensure content stays above the stars */
    .max-w-3xl {
      position: relative;
      z-index: 1;
    }

    /* Gastly animations */
    #gastly {
      filter: drop-shadow(0 0 12px rgba(45, 31, 61, 0.2));
      transition: transform 0.3s ease;
      z-index: 50;
    }

    #gastly:hover {
      animation: spooky 3s infinite;
    }

    @keyframes spooky {
      0%, 100% { 
        transform: scale(1);
        filter: drop-shadow(0 0 12px rgba(45, 31, 61, 0.2));
      }
      50% { 
        transform: translateY(-5px) scale(1.05);
        filter: drop-shadow(0 0 16px rgba(45, 31, 61, 0.3));
      }
    }

    #gastly.clicked {
      animation: vanish 1.5s forwards;
    }

    @keyframes vanish {
      0% {
        transform: scale(1);
        opacity: 1;
        filter: drop-shadow(0 0 12px rgba(45, 31, 61, 0.2));
      }
      50% {
        transform: translateY(-10px) scale(1.1);
        opacity: 0.6;
        filter: drop-shadow(0 0 20px rgba(45, 31, 61, 0.4));
      }
      100% {
        transform: translateY(-20px) scale(0);
        opacity: 0;
        filter: blur(12px) drop-shadow(0 0 20px rgba(45, 31, 61, 0));
      }
    }

    /* Update hover effects to use white */
    :is(a, button):hover {
      color: white !important;
    }

    .bg-primary\/5:hover {
      background-color: rgba(255, 255, 255, 0.05);
      border-color: rgba(255, 255, 255, 0.2);
    }
  </style>

  <script>
    let isNewestFirst = true;
    const postsContainer = document.getElementById('posts-container');
    const sortToggle = document.getElementById('sort-toggle');
    const sortText = document.getElementById('sort-text');
    const posts = Array.from(postsContainer.children);
    const arrow = sortToggle.querySelector('svg');

    sortToggle.addEventListener('click', () => {
      isNewestFirst = !isNewestFirst;
      
      // Update UI
      sortText.textContent = isNewestFirst ? 'Newest First' : 'Oldest First';
      arrow.style.transform = isNewestFirst ? 'rotate(0deg)' : 'rotate(180deg)';

      // Sort posts
      posts.reverse().forEach(post => {
        postsContainer.appendChild(post);
      });
    });

    // Gastly click handler
    const gastly = document.getElementById('gastly');
    if (gastly && gastly.parentElement) {
      gastly.parentElement.addEventListener('click', (e) => {
        e.preventDefault();
        gastly.classList.add('clicked');
        setTimeout(() => {
          window.location.href = '/';
        }, 1000);
      });
    }
  </script>
</BaseLayout>